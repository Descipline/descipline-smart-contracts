/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { DESCIPLINE_PROGRAM_ADDRESS } from '../programs';

/** NotAllowedToken: Only WSOL or USDC allowed */
export const DESCIPLINE_ERROR__NOT_ALLOWED_TOKEN = 0x1770; // 6000
/** InvalidCredentialAuthority: Invalid credential authority */
export const DESCIPLINE_ERROR__INVALID_CREDENTIAL_AUTHORITY = 0x1771; // 6001
/** InvalidAttestor: Not allowed attestor */
export const DESCIPLINE_ERROR__INVALID_ATTESTOR = 0x1772; // 6002
/** InvalidCredentialData: Invalid credential data */
export const DESCIPLINE_ERROR__INVALID_CREDENTIAL_DATA = 0x1773; // 6003
/** InvalidAuthority: Invalid authority */
export const DESCIPLINE_ERROR__INVALID_AUTHORITY = 0x1774; // 6004
/** UnauthorizedSigner: Unauthorized signer */
export const DESCIPLINE_ERROR__UNAUTHORIZED_SIGNER = 0x1775; // 6005
/** TooManySigners: Too many signers (only one allowed) */
export const DESCIPLINE_ERROR__TOO_MANY_SIGNERS = 0x1776; // 6006
/** SchemaPaused: Schema is paused */
export const DESCIPLINE_ERROR__SCHEMA_PAUSED = 0x1777; // 6007
/** InvalidSchemaHash: Invalid schema hash */
export const DESCIPLINE_ERROR__INVALID_SCHEMA_HASH = 0x1778; // 6008
/** InvalidVerificationKeyHash: Invalid verification key hash */
export const DESCIPLINE_ERROR__INVALID_VERIFICATION_KEY_HASH = 0x1779; // 6009
/** InvalidSchema: Invalid schema structure */
export const DESCIPLINE_ERROR__INVALID_SCHEMA = 0x177a; // 6010
/** InvalidSchemaData: Invalid schema data */
export const DESCIPLINE_ERROR__INVALID_SCHEMA_DATA = 0x177b; // 6011
/** NameMismatch: Schema name does not match challenge name */
export const DESCIPLINE_ERROR__NAME_MISMATCH = 0x177c; // 6012
/** InvalidLayout: Invalid layout */
export const DESCIPLINE_ERROR__INVALID_LAYOUT = 0x177d; // 6013
/** InvalidAccountData: Invalid Discriminator */
export const DESCIPLINE_ERROR__INVALID_ACCOUNT_DATA = 0x177e; // 6014
/** InvalidCredential: Invalid credential authority */
export const DESCIPLINE_ERROR__INVALID_CREDENTIAL = 0x177f; // 6015
/** InvalidAttestationData: Invalid attestation data */
export const DESCIPLINE_ERROR__INVALID_ATTESTATION_DATA = 0x1780; // 6016
/** CredentialMismatch: Credential mismatch */
export const DESCIPLINE_ERROR__CREDENTIAL_MISMATCH = 0x1781; // 6017
/** ChallengeMismatch: Challenge mismatch */
export const DESCIPLINE_ERROR__CHALLENGE_MISMATCH = 0x1782; // 6018
/** SchemaMismatch: Schema mismatch */
export const DESCIPLINE_ERROR__SCHEMA_MISMATCH = 0x1783; // 6019
/** InvalidDataLayout: Invalid data layout */
export const DESCIPLINE_ERROR__INVALID_DATA_LAYOUT = 0x1784; // 6020
/** UnauthorizedSigners: Unauthorized signers */
export const DESCIPLINE_ERROR__UNAUTHORIZED_SIGNERS = 0x1785; // 6021
/** ChallengeEnded: Challenge has already ended */
export const DESCIPLINE_ERROR__CHALLENGE_ENDED = 0x1786; // 6022
/** ChallengeNotStarted: Challenge has not started yet */
export const DESCIPLINE_ERROR__CHALLENGE_NOT_STARTED = 0x1787; // 6023
/** InvalidStakeAmount: Invalid stake amount */
export const DESCIPLINE_ERROR__INVALID_STAKE_AMOUNT = 0x1788; // 6024
/** InvalidFeePercentage: Invalid fee percentage */
export const DESCIPLINE_ERROR__INVALID_FEE_PERCENTAGE = 0x1789; // 6025
/** ChallengeNotFound: Challenge not found */
export const DESCIPLINE_ERROR__CHALLENGE_NOT_FOUND = 0x178a; // 6026
/** StakeEnded: Stake has ended */
export const DESCIPLINE_ERROR__STAKE_ENDED = 0x178b; // 6027
/** InsufficientToken: Insufficient token balance */
export const DESCIPLINE_ERROR__INSUFFICIENT_TOKEN = 0x178c; // 6028
/** StakeFailed: Stake failed */
export const DESCIPLINE_ERROR__STAKE_FAILED = 0x178d; // 6029
/** ClaimNotStarted: Claim period has not started */
export const DESCIPLINE_ERROR__CLAIM_NOT_STARTED = 0x178e; // 6030
/** ClaimFailed: Claim failed */
export const DESCIPLINE_ERROR__CLAIM_FAILED = 0x178f; // 6031
/** NotInWhitelist: Not in whitelist */
export const DESCIPLINE_ERROR__NOT_IN_WHITELIST = 0x1790; // 6032
/** ShouldCloseChallenge: Last claim should close challenge */
export const DESCIPLINE_ERROR__SHOULD_CLOSE_CHALLENGE = 0x1791; // 6033
/** InvalidCloseChallenge: Challenge should not be closed */
export const DESCIPLINE_ERROR__INVALID_CLOSE_CHALLENGE = 0x1792; // 6034
/** InvalidDiscriminator: Invalid discriminator */
export const DESCIPLINE_ERROR__INVALID_DISCRIMINATOR = 0x1793; // 6035

export type DesciplineError =
  | typeof DESCIPLINE_ERROR__CHALLENGE_ENDED
  | typeof DESCIPLINE_ERROR__CHALLENGE_MISMATCH
  | typeof DESCIPLINE_ERROR__CHALLENGE_NOT_FOUND
  | typeof DESCIPLINE_ERROR__CHALLENGE_NOT_STARTED
  | typeof DESCIPLINE_ERROR__CLAIM_FAILED
  | typeof DESCIPLINE_ERROR__CLAIM_NOT_STARTED
  | typeof DESCIPLINE_ERROR__CREDENTIAL_MISMATCH
  | typeof DESCIPLINE_ERROR__INSUFFICIENT_TOKEN
  | typeof DESCIPLINE_ERROR__INVALID_ACCOUNT_DATA
  | typeof DESCIPLINE_ERROR__INVALID_ATTESTATION_DATA
  | typeof DESCIPLINE_ERROR__INVALID_ATTESTOR
  | typeof DESCIPLINE_ERROR__INVALID_AUTHORITY
  | typeof DESCIPLINE_ERROR__INVALID_CLOSE_CHALLENGE
  | typeof DESCIPLINE_ERROR__INVALID_CREDENTIAL
  | typeof DESCIPLINE_ERROR__INVALID_CREDENTIAL_AUTHORITY
  | typeof DESCIPLINE_ERROR__INVALID_CREDENTIAL_DATA
  | typeof DESCIPLINE_ERROR__INVALID_DATA_LAYOUT
  | typeof DESCIPLINE_ERROR__INVALID_DISCRIMINATOR
  | typeof DESCIPLINE_ERROR__INVALID_FEE_PERCENTAGE
  | typeof DESCIPLINE_ERROR__INVALID_LAYOUT
  | typeof DESCIPLINE_ERROR__INVALID_SCHEMA
  | typeof DESCIPLINE_ERROR__INVALID_SCHEMA_DATA
  | typeof DESCIPLINE_ERROR__INVALID_SCHEMA_HASH
  | typeof DESCIPLINE_ERROR__INVALID_STAKE_AMOUNT
  | typeof DESCIPLINE_ERROR__INVALID_VERIFICATION_KEY_HASH
  | typeof DESCIPLINE_ERROR__NAME_MISMATCH
  | typeof DESCIPLINE_ERROR__NOT_ALLOWED_TOKEN
  | typeof DESCIPLINE_ERROR__NOT_IN_WHITELIST
  | typeof DESCIPLINE_ERROR__SCHEMA_MISMATCH
  | typeof DESCIPLINE_ERROR__SCHEMA_PAUSED
  | typeof DESCIPLINE_ERROR__SHOULD_CLOSE_CHALLENGE
  | typeof DESCIPLINE_ERROR__STAKE_ENDED
  | typeof DESCIPLINE_ERROR__STAKE_FAILED
  | typeof DESCIPLINE_ERROR__TOO_MANY_SIGNERS
  | typeof DESCIPLINE_ERROR__UNAUTHORIZED_SIGNER
  | typeof DESCIPLINE_ERROR__UNAUTHORIZED_SIGNERS;

let desciplineErrorMessages: Record<DesciplineError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  desciplineErrorMessages = {
    [DESCIPLINE_ERROR__CHALLENGE_ENDED]: `Challenge has already ended`,
    [DESCIPLINE_ERROR__CHALLENGE_MISMATCH]: `Challenge mismatch`,
    [DESCIPLINE_ERROR__CHALLENGE_NOT_FOUND]: `Challenge not found`,
    [DESCIPLINE_ERROR__CHALLENGE_NOT_STARTED]: `Challenge has not started yet`,
    [DESCIPLINE_ERROR__CLAIM_FAILED]: `Claim failed`,
    [DESCIPLINE_ERROR__CLAIM_NOT_STARTED]: `Claim period has not started`,
    [DESCIPLINE_ERROR__CREDENTIAL_MISMATCH]: `Credential mismatch`,
    [DESCIPLINE_ERROR__INSUFFICIENT_TOKEN]: `Insufficient token balance`,
    [DESCIPLINE_ERROR__INVALID_ACCOUNT_DATA]: `Invalid Discriminator`,
    [DESCIPLINE_ERROR__INVALID_ATTESTATION_DATA]: `Invalid attestation data`,
    [DESCIPLINE_ERROR__INVALID_ATTESTOR]: `Not allowed attestor`,
    [DESCIPLINE_ERROR__INVALID_AUTHORITY]: `Invalid authority`,
    [DESCIPLINE_ERROR__INVALID_CLOSE_CHALLENGE]: `Challenge should not be closed`,
    [DESCIPLINE_ERROR__INVALID_CREDENTIAL]: `Invalid credential authority`,
    [DESCIPLINE_ERROR__INVALID_CREDENTIAL_AUTHORITY]: `Invalid credential authority`,
    [DESCIPLINE_ERROR__INVALID_CREDENTIAL_DATA]: `Invalid credential data`,
    [DESCIPLINE_ERROR__INVALID_DATA_LAYOUT]: `Invalid data layout`,
    [DESCIPLINE_ERROR__INVALID_DISCRIMINATOR]: `Invalid discriminator`,
    [DESCIPLINE_ERROR__INVALID_FEE_PERCENTAGE]: `Invalid fee percentage`,
    [DESCIPLINE_ERROR__INVALID_LAYOUT]: `Invalid layout`,
    [DESCIPLINE_ERROR__INVALID_SCHEMA]: `Invalid schema structure`,
    [DESCIPLINE_ERROR__INVALID_SCHEMA_DATA]: `Invalid schema data`,
    [DESCIPLINE_ERROR__INVALID_SCHEMA_HASH]: `Invalid schema hash`,
    [DESCIPLINE_ERROR__INVALID_STAKE_AMOUNT]: `Invalid stake amount`,
    [DESCIPLINE_ERROR__INVALID_VERIFICATION_KEY_HASH]: `Invalid verification key hash`,
    [DESCIPLINE_ERROR__NAME_MISMATCH]: `Schema name does not match challenge name`,
    [DESCIPLINE_ERROR__NOT_ALLOWED_TOKEN]: `Only WSOL or USDC allowed`,
    [DESCIPLINE_ERROR__NOT_IN_WHITELIST]: `Not in whitelist`,
    [DESCIPLINE_ERROR__SCHEMA_MISMATCH]: `Schema mismatch`,
    [DESCIPLINE_ERROR__SCHEMA_PAUSED]: `Schema is paused`,
    [DESCIPLINE_ERROR__SHOULD_CLOSE_CHALLENGE]: `Last claim should close challenge`,
    [DESCIPLINE_ERROR__STAKE_ENDED]: `Stake has ended`,
    [DESCIPLINE_ERROR__STAKE_FAILED]: `Stake failed`,
    [DESCIPLINE_ERROR__TOO_MANY_SIGNERS]: `Too many signers (only one allowed)`,
    [DESCIPLINE_ERROR__UNAUTHORIZED_SIGNER]: `Unauthorized signer`,
    [DESCIPLINE_ERROR__UNAUTHORIZED_SIGNERS]: `Unauthorized signers`,
  };
}

export function getDesciplineErrorMessage(code: DesciplineError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (desciplineErrorMessages as Record<DesciplineError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isDesciplineError<TProgramErrorCode extends DesciplineError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    DESCIPLINE_PROGRAM_ADDRESS,
    code
  );
}
