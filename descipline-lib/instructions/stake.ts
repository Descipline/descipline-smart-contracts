/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DESCIPLINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const STAKE_DISCRIMINATOR = new Uint8Array([
  206, 176, 202, 18, 200, 209, 179, 108,
]);

export function getStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(STAKE_DISCRIMINATOR);
}

export type StakeInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountChallenger extends string | AccountMeta<string> = string,
  TAccountChallengerAta extends string | AccountMeta<string> = string,
  TAccountReceipt extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountChallenge extends string | AccountMeta<string> = string,
  TAccountStakeMint extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountChallenger extends string
        ? WritableSignerAccount<TAccountChallenger> &
            AccountSignerMeta<TAccountChallenger>
        : TAccountChallenger,
      TAccountChallengerAta extends string
        ? WritableAccount<TAccountChallengerAta>
        : TAccountChallengerAta,
      TAccountReceipt extends string
        ? WritableAccount<TAccountReceipt>
        : TAccountReceipt,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountChallenge extends string
        ? ReadonlyAccount<TAccountChallenge>
        : TAccountChallenge,
      TAccountStakeMint extends string
        ? ReadonlyAccount<TAccountStakeMint>
        : TAccountStakeMint,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type StakeInstructionData = { discriminator: ReadonlyUint8Array };

export type StakeInstructionDataArgs = {};

export function getStakeInstructionDataEncoder(): FixedSizeEncoder<StakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: STAKE_DISCRIMINATOR })
  );
}

export function getStakeInstructionDataDecoder(): FixedSizeDecoder<StakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getStakeInstructionDataCodec(): FixedSizeCodec<
  StakeInstructionDataArgs,
  StakeInstructionData
> {
  return combineCodec(
    getStakeInstructionDataEncoder(),
    getStakeInstructionDataDecoder()
  );
}

export type StakeAsyncInput<
  TAccountChallenger extends string = string,
  TAccountChallengerAta extends string = string,
  TAccountReceipt extends string = string,
  TAccountVault extends string = string,
  TAccountChallenge extends string = string,
  TAccountStakeMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  challenger: TransactionSigner<TAccountChallenger>;
  challengerAta?: Address<TAccountChallengerAta>;
  receipt?: Address<TAccountReceipt>;
  vault?: Address<TAccountVault>;
  challenge: Address<TAccountChallenge>;
  stakeMint: Address<TAccountStakeMint>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getStakeInstructionAsync<
  TAccountChallenger extends string,
  TAccountChallengerAta extends string,
  TAccountReceipt extends string,
  TAccountVault extends string,
  TAccountChallenge extends string,
  TAccountStakeMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: StakeAsyncInput<
    TAccountChallenger,
    TAccountChallengerAta,
    TAccountReceipt,
    TAccountVault,
    TAccountChallenge,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StakeInstruction<
    TProgramAddress,
    TAccountChallenger,
    TAccountChallengerAta,
    TAccountReceipt,
    TAccountVault,
    TAccountChallenge,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    challenger: { value: input.challenger ?? null, isWritable: true },
    challengerAta: { value: input.challengerAta ?? null, isWritable: true },
    receipt: { value: input.receipt ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    challenge: { value: input.challenge ?? null, isWritable: false },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.challengerAta.value) {
    accounts.challengerAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.challenger.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.stakeMint.value)),
      ],
    });
  }
  if (!accounts.receipt.value) {
    accounts.receipt.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 101, 99, 101, 105, 112, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.challenge.value)),
        getAddressEncoder().encode(expectAddress(accounts.challenger.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.challenge.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.stakeMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.challenger),
      getAccountMeta(accounts.challengerAta),
      getAccountMeta(accounts.receipt),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.challenge),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getStakeInstructionDataEncoder().encode({}),
  } as StakeInstruction<
    TProgramAddress,
    TAccountChallenger,
    TAccountChallengerAta,
    TAccountReceipt,
    TAccountVault,
    TAccountChallenge,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type StakeInput<
  TAccountChallenger extends string = string,
  TAccountChallengerAta extends string = string,
  TAccountReceipt extends string = string,
  TAccountVault extends string = string,
  TAccountChallenge extends string = string,
  TAccountStakeMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  challenger: TransactionSigner<TAccountChallenger>;
  challengerAta: Address<TAccountChallengerAta>;
  receipt: Address<TAccountReceipt>;
  vault: Address<TAccountVault>;
  challenge: Address<TAccountChallenge>;
  stakeMint: Address<TAccountStakeMint>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getStakeInstruction<
  TAccountChallenger extends string,
  TAccountChallengerAta extends string,
  TAccountReceipt extends string,
  TAccountVault extends string,
  TAccountChallenge extends string,
  TAccountStakeMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: StakeInput<
    TAccountChallenger,
    TAccountChallengerAta,
    TAccountReceipt,
    TAccountVault,
    TAccountChallenge,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): StakeInstruction<
  TProgramAddress,
  TAccountChallenger,
  TAccountChallengerAta,
  TAccountReceipt,
  TAccountVault,
  TAccountChallenge,
  TAccountStakeMint,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    challenger: { value: input.challenger ?? null, isWritable: true },
    challengerAta: { value: input.challengerAta ?? null, isWritable: true },
    receipt: { value: input.receipt ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    challenge: { value: input.challenge ?? null, isWritable: false },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.challenger),
      getAccountMeta(accounts.challengerAta),
      getAccountMeta(accounts.receipt),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.challenge),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getStakeInstructionDataEncoder().encode({}),
  } as StakeInstruction<
    TProgramAddress,
    TAccountChallenger,
    TAccountChallengerAta,
    TAccountReceipt,
    TAccountVault,
    TAccountChallenge,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedStakeInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    challenger: TAccountMetas[0];
    challengerAta: TAccountMetas[1];
    receipt: TAccountMetas[2];
    vault: TAccountMetas[3];
    challenge: TAccountMetas[4];
    stakeMint: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: StakeInstructionData;
};

export function parseStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      challenger: getNextAccount(),
      challengerAta: getNextAccount(),
      receipt: getNextAccount(),
      vault: getNextAccount(),
      challenge: getNextAccount(),
      stakeMint: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getStakeInstructionDataDecoder().decode(instruction.data),
  };
}
