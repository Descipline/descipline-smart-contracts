/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DESCIPLINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const RESOLVE_DISCRIMINATOR = new Uint8Array([
  246, 150, 236, 206, 108, 63, 58, 10,
]);

export function getResolveDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(RESOLVE_DISCRIMINATOR);
}

export type ResolveInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountAttestor extends string | AccountMeta<string> = string,
  TAccountChallenge extends string | AccountMeta<string> = string,
  TAccountResolution extends string | AccountMeta<string> = string,
  TAccountAttestation extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAttestor extends string
        ? WritableSignerAccount<TAccountAttestor> &
            AccountSignerMeta<TAccountAttestor>
        : TAccountAttestor,
      TAccountChallenge extends string
        ? ReadonlyAccount<TAccountChallenge>
        : TAccountChallenge,
      TAccountResolution extends string
        ? WritableAccount<TAccountResolution>
        : TAccountResolution,
      TAccountAttestation extends string
        ? ReadonlyAccount<TAccountAttestation>
        : TAccountAttestation,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResolveInstructionData = { discriminator: ReadonlyUint8Array };

export type ResolveInstructionDataArgs = {};

export function getResolveInstructionDataEncoder(): FixedSizeEncoder<ResolveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: RESOLVE_DISCRIMINATOR })
  );
}

export function getResolveInstructionDataDecoder(): FixedSizeDecoder<ResolveInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getResolveInstructionDataCodec(): FixedSizeCodec<
  ResolveInstructionDataArgs,
  ResolveInstructionData
> {
  return combineCodec(
    getResolveInstructionDataEncoder(),
    getResolveInstructionDataDecoder()
  );
}

export type ResolveAsyncInput<
  TAccountAttestor extends string = string,
  TAccountChallenge extends string = string,
  TAccountResolution extends string = string,
  TAccountAttestation extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  attestor: TransactionSigner<TAccountAttestor>;
  challenge: Address<TAccountChallenge>;
  resolution?: Address<TAccountResolution>;
  attestation: Address<TAccountAttestation>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getResolveInstructionAsync<
  TAccountAttestor extends string,
  TAccountChallenge extends string,
  TAccountResolution extends string,
  TAccountAttestation extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: ResolveAsyncInput<
    TAccountAttestor,
    TAccountChallenge,
    TAccountResolution,
    TAccountAttestation,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ResolveInstruction<
    TProgramAddress,
    TAccountAttestor,
    TAccountChallenge,
    TAccountResolution,
    TAccountAttestation,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    attestor: { value: input.attestor ?? null, isWritable: true },
    challenge: { value: input.challenge ?? null, isWritable: false },
    resolution: { value: input.resolution ?? null, isWritable: true },
    attestation: { value: input.attestation ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.resolution.value) {
    accounts.resolution.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 101, 115, 111, 108, 117, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.challenge.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.attestor),
      getAccountMeta(accounts.challenge),
      getAccountMeta(accounts.resolution),
      getAccountMeta(accounts.attestation),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getResolveInstructionDataEncoder().encode({}),
  } as ResolveInstruction<
    TProgramAddress,
    TAccountAttestor,
    TAccountChallenge,
    TAccountResolution,
    TAccountAttestation,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ResolveInput<
  TAccountAttestor extends string = string,
  TAccountChallenge extends string = string,
  TAccountResolution extends string = string,
  TAccountAttestation extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  attestor: TransactionSigner<TAccountAttestor>;
  challenge: Address<TAccountChallenge>;
  resolution: Address<TAccountResolution>;
  attestation: Address<TAccountAttestation>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getResolveInstruction<
  TAccountAttestor extends string,
  TAccountChallenge extends string,
  TAccountResolution extends string,
  TAccountAttestation extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: ResolveInput<
    TAccountAttestor,
    TAccountChallenge,
    TAccountResolution,
    TAccountAttestation,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ResolveInstruction<
  TProgramAddress,
  TAccountAttestor,
  TAccountChallenge,
  TAccountResolution,
  TAccountAttestation,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    attestor: { value: input.attestor ?? null, isWritable: true },
    challenge: { value: input.challenge ?? null, isWritable: false },
    resolution: { value: input.resolution ?? null, isWritable: true },
    attestation: { value: input.attestation ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.attestor),
      getAccountMeta(accounts.challenge),
      getAccountMeta(accounts.resolution),
      getAccountMeta(accounts.attestation),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getResolveInstructionDataEncoder().encode({}),
  } as ResolveInstruction<
    TProgramAddress,
    TAccountAttestor,
    TAccountChallenge,
    TAccountResolution,
    TAccountAttestation,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedResolveInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    attestor: TAccountMetas[0];
    challenge: TAccountMetas[1];
    resolution: TAccountMetas[2];
    attestation: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: ResolveInstructionData;
};

export function parseResolveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedResolveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      attestor: getNextAccount(),
      challenge: getNextAccount(),
      resolution: getNextAccount(),
      attestation: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getResolveInstructionDataDecoder().decode(instruction.data),
  };
}
