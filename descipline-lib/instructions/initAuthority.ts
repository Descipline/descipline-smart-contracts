/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DESCIPLINE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  136, 150, 94, 172, 74, 199, 236, 85,
]);

export function getInitAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_AUTHORITY_DISCRIMINATOR
  );
}

export type InitAuthorityInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountCredentialAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountCredentialAuthority extends string
        ? WritableAccount<TAccountCredentialAuthority>
        : TAccountCredentialAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitAuthorityInstructionDataArgs = {};

export function getInitAuthorityInstructionDataEncoder(): FixedSizeEncoder<InitAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INIT_AUTHORITY_DISCRIMINATOR })
  );
}

export function getInitAuthorityInstructionDataDecoder(): FixedSizeDecoder<InitAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitAuthorityInstructionDataCodec(): FixedSizeCodec<
  InitAuthorityInstructionDataArgs,
  InitAuthorityInstructionData
> {
  return combineCodec(
    getInitAuthorityInstructionDataEncoder(),
    getInitAuthorityInstructionDataDecoder()
  );
}

export type InitAuthorityAsyncInput<
  TAccountSigner extends string = string,
  TAccountCredentialAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  credentialAuthority?: Address<TAccountCredentialAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitAuthorityInstructionAsync<
  TAccountSigner extends string,
  TAccountCredentialAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: InitAuthorityAsyncInput<
    TAccountSigner,
    TAccountCredentialAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitAuthorityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountCredentialAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    credentialAuthority: {
      value: input.credentialAuthority ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.credentialAuthority.value) {
    accounts.credentialAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.credentialAuthority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitAuthorityInstructionDataEncoder().encode({}),
  } as InitAuthorityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountCredentialAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitAuthorityInput<
  TAccountSigner extends string = string,
  TAccountCredentialAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  credentialAuthority: Address<TAccountCredentialAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitAuthorityInstruction<
  TAccountSigner extends string,
  TAccountCredentialAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: InitAuthorityInput<
    TAccountSigner,
    TAccountCredentialAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitAuthorityInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountCredentialAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    credentialAuthority: {
      value: input.credentialAuthority ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.credentialAuthority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitAuthorityInstructionDataEncoder().encode({}),
  } as InitAuthorityInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountCredentialAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitAuthorityInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    credentialAuthority: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitAuthorityInstructionData;
};

export function parseInitAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      credentialAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
