/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DESCIPLINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_AND_CLOSE_DISCRIMINATOR = new Uint8Array([
  177, 41, 244, 95, 42, 114, 27, 99,
]);

export function getClaimAndCloseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_AND_CLOSE_DISCRIMINATOR
  );
}

export type ClaimAndCloseInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountWinner extends string | AccountMeta<string> = string,
  TAccountWinnerAta extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountChallenge extends string | AccountMeta<string> = string,
  TAccountResolution extends string | AccountMeta<string> = string,
  TAccountReceipt extends string | AccountMeta<string> = string,
  TAccountInitiator extends string | AccountMeta<string> = string,
  TAccountAttestor extends string | AccountMeta<string> = string,
  TAccountStakeMint extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWinner extends string
        ? WritableSignerAccount<TAccountWinner> &
            AccountSignerMeta<TAccountWinner>
        : TAccountWinner,
      TAccountWinnerAta extends string
        ? WritableAccount<TAccountWinnerAta>
        : TAccountWinnerAta,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountChallenge extends string
        ? WritableAccount<TAccountChallenge>
        : TAccountChallenge,
      TAccountResolution extends string
        ? WritableAccount<TAccountResolution>
        : TAccountResolution,
      TAccountReceipt extends string
        ? WritableAccount<TAccountReceipt>
        : TAccountReceipt,
      TAccountInitiator extends string
        ? WritableAccount<TAccountInitiator>
        : TAccountInitiator,
      TAccountAttestor extends string
        ? WritableAccount<TAccountAttestor>
        : TAccountAttestor,
      TAccountStakeMint extends string
        ? ReadonlyAccount<TAccountStakeMint>
        : TAccountStakeMint,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimAndCloseInstructionData = {
  discriminator: ReadonlyUint8Array;
  proof: ReadonlyUint8Array;
  index: number;
};

export type ClaimAndCloseInstructionDataArgs = {
  proof: ReadonlyUint8Array;
  index: number;
};

export function getClaimAndCloseInstructionDataEncoder(): Encoder<ClaimAndCloseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['proof', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['index', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_AND_CLOSE_DISCRIMINATOR })
  );
}

export function getClaimAndCloseInstructionDataDecoder(): Decoder<ClaimAndCloseInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['proof', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['index', getU8Decoder()],
  ]);
}

export function getClaimAndCloseInstructionDataCodec(): Codec<
  ClaimAndCloseInstructionDataArgs,
  ClaimAndCloseInstructionData
> {
  return combineCodec(
    getClaimAndCloseInstructionDataEncoder(),
    getClaimAndCloseInstructionDataDecoder()
  );
}

export type ClaimAndCloseAsyncInput<
  TAccountWinner extends string = string,
  TAccountWinnerAta extends string = string,
  TAccountVault extends string = string,
  TAccountChallenge extends string = string,
  TAccountResolution extends string = string,
  TAccountReceipt extends string = string,
  TAccountInitiator extends string = string,
  TAccountAttestor extends string = string,
  TAccountStakeMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  winner: TransactionSigner<TAccountWinner>;
  winnerAta?: Address<TAccountWinnerAta>;
  vault?: Address<TAccountVault>;
  challenge: Address<TAccountChallenge>;
  resolution?: Address<TAccountResolution>;
  receipt?: Address<TAccountReceipt>;
  initiator: Address<TAccountInitiator>;
  attestor: Address<TAccountAttestor>;
  stakeMint: Address<TAccountStakeMint>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  proof: ClaimAndCloseInstructionDataArgs['proof'];
  index: ClaimAndCloseInstructionDataArgs['index'];
};

export async function getClaimAndCloseInstructionAsync<
  TAccountWinner extends string,
  TAccountWinnerAta extends string,
  TAccountVault extends string,
  TAccountChallenge extends string,
  TAccountResolution extends string,
  TAccountReceipt extends string,
  TAccountInitiator extends string,
  TAccountAttestor extends string,
  TAccountStakeMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: ClaimAndCloseAsyncInput<
    TAccountWinner,
    TAccountWinnerAta,
    TAccountVault,
    TAccountChallenge,
    TAccountResolution,
    TAccountReceipt,
    TAccountInitiator,
    TAccountAttestor,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimAndCloseInstruction<
    TProgramAddress,
    TAccountWinner,
    TAccountWinnerAta,
    TAccountVault,
    TAccountChallenge,
    TAccountResolution,
    TAccountReceipt,
    TAccountInitiator,
    TAccountAttestor,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    winner: { value: input.winner ?? null, isWritable: true },
    winnerAta: { value: input.winnerAta ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    challenge: { value: input.challenge ?? null, isWritable: true },
    resolution: { value: input.resolution ?? null, isWritable: true },
    receipt: { value: input.receipt ?? null, isWritable: true },
    initiator: { value: input.initiator ?? null, isWritable: true },
    attestor: { value: input.attestor ?? null, isWritable: true },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.winnerAta.value) {
    accounts.winnerAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.winner.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.stakeMint.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.challenge.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.stakeMint.value)),
      ],
    });
  }
  if (!accounts.resolution.value) {
    accounts.resolution.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 101, 115, 111, 108, 117, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.challenge.value)),
      ],
    });
  }
  if (!accounts.receipt.value) {
    accounts.receipt.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 101, 99, 101, 105, 112, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.challenge.value)),
        getAddressEncoder().encode(expectAddress(accounts.winner.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.winner),
      getAccountMeta(accounts.winnerAta),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.challenge),
      getAccountMeta(accounts.resolution),
      getAccountMeta(accounts.receipt),
      getAccountMeta(accounts.initiator),
      getAccountMeta(accounts.attestor),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimAndCloseInstructionDataEncoder().encode(
      args as ClaimAndCloseInstructionDataArgs
    ),
  } as ClaimAndCloseInstruction<
    TProgramAddress,
    TAccountWinner,
    TAccountWinnerAta,
    TAccountVault,
    TAccountChallenge,
    TAccountResolution,
    TAccountReceipt,
    TAccountInitiator,
    TAccountAttestor,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ClaimAndCloseInput<
  TAccountWinner extends string = string,
  TAccountWinnerAta extends string = string,
  TAccountVault extends string = string,
  TAccountChallenge extends string = string,
  TAccountResolution extends string = string,
  TAccountReceipt extends string = string,
  TAccountInitiator extends string = string,
  TAccountAttestor extends string = string,
  TAccountStakeMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  winner: TransactionSigner<TAccountWinner>;
  winnerAta: Address<TAccountWinnerAta>;
  vault: Address<TAccountVault>;
  challenge: Address<TAccountChallenge>;
  resolution: Address<TAccountResolution>;
  receipt: Address<TAccountReceipt>;
  initiator: Address<TAccountInitiator>;
  attestor: Address<TAccountAttestor>;
  stakeMint: Address<TAccountStakeMint>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  proof: ClaimAndCloseInstructionDataArgs['proof'];
  index: ClaimAndCloseInstructionDataArgs['index'];
};

export function getClaimAndCloseInstruction<
  TAccountWinner extends string,
  TAccountWinnerAta extends string,
  TAccountVault extends string,
  TAccountChallenge extends string,
  TAccountResolution extends string,
  TAccountReceipt extends string,
  TAccountInitiator extends string,
  TAccountAttestor extends string,
  TAccountStakeMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: ClaimAndCloseInput<
    TAccountWinner,
    TAccountWinnerAta,
    TAccountVault,
    TAccountChallenge,
    TAccountResolution,
    TAccountReceipt,
    TAccountInitiator,
    TAccountAttestor,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimAndCloseInstruction<
  TProgramAddress,
  TAccountWinner,
  TAccountWinnerAta,
  TAccountVault,
  TAccountChallenge,
  TAccountResolution,
  TAccountReceipt,
  TAccountInitiator,
  TAccountAttestor,
  TAccountStakeMint,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    winner: { value: input.winner ?? null, isWritable: true },
    winnerAta: { value: input.winnerAta ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    challenge: { value: input.challenge ?? null, isWritable: true },
    resolution: { value: input.resolution ?? null, isWritable: true },
    receipt: { value: input.receipt ?? null, isWritable: true },
    initiator: { value: input.initiator ?? null, isWritable: true },
    attestor: { value: input.attestor ?? null, isWritable: true },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.winner),
      getAccountMeta(accounts.winnerAta),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.challenge),
      getAccountMeta(accounts.resolution),
      getAccountMeta(accounts.receipt),
      getAccountMeta(accounts.initiator),
      getAccountMeta(accounts.attestor),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimAndCloseInstructionDataEncoder().encode(
      args as ClaimAndCloseInstructionDataArgs
    ),
  } as ClaimAndCloseInstruction<
    TProgramAddress,
    TAccountWinner,
    TAccountWinnerAta,
    TAccountVault,
    TAccountChallenge,
    TAccountResolution,
    TAccountReceipt,
    TAccountInitiator,
    TAccountAttestor,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimAndCloseInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    winner: TAccountMetas[0];
    winnerAta: TAccountMetas[1];
    vault: TAccountMetas[2];
    challenge: TAccountMetas[3];
    resolution: TAccountMetas[4];
    receipt: TAccountMetas[5];
    initiator: TAccountMetas[6];
    attestor: TAccountMetas[7];
    stakeMint: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
  };
  data: ClaimAndCloseInstructionData;
};

export function parseClaimAndCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimAndCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      winner: getNextAccount(),
      winnerAta: getNextAccount(),
      vault: getNextAccount(),
      challenge: getNextAccount(),
      resolution: getNextAccount(),
      receipt: getNextAccount(),
      initiator: getNextAccount(),
      attestor: getNextAccount(),
      stakeMint: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimAndCloseInstructionDataDecoder().decode(instruction.data),
  };
}
