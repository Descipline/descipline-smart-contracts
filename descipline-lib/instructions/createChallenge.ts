/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DESCIPLINE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getTokenAllowedDecoder,
  getTokenAllowedEncoder,
  type TokenAllowed,
  type TokenAllowedArgs,
} from '../types';

export const CREATE_CHALLENGE_DISCRIMINATOR = new Uint8Array([
  170, 244, 47, 1, 1, 15, 173, 239,
]);

export function getCreateChallengeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CHALLENGE_DISCRIMINATOR
  );
}

export type CreateChallengeInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountInitiator extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountChallenge extends string | AccountMeta<string> = string,
  TAccountSchema extends string | AccountMeta<string> = string,
  TAccountCredential extends string | AccountMeta<string> = string,
  TAccountCredentialAuthority extends string | AccountMeta<string> = string,
  TAccountStakeMint extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountInitiator extends string
        ? WritableSignerAccount<TAccountInitiator> &
            AccountSignerMeta<TAccountInitiator>
        : TAccountInitiator,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountChallenge extends string
        ? WritableAccount<TAccountChallenge>
        : TAccountChallenge,
      TAccountSchema extends string
        ? ReadonlyAccount<TAccountSchema>
        : TAccountSchema,
      TAccountCredential extends string
        ? ReadonlyAccount<TAccountCredential>
        : TAccountCredential,
      TAccountCredentialAuthority extends string
        ? ReadonlyAccount<TAccountCredentialAuthority>
        : TAccountCredentialAuthority,
      TAccountStakeMint extends string
        ? ReadonlyAccount<TAccountStakeMint>
        : TAccountStakeMint,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateChallengeInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  tokenAllowed: TokenAllowed;
  stakeAmount: bigint;
  fee: number;
  stakeEndAt: bigint;
  claimStartFrom: bigint;
};

export type CreateChallengeInstructionDataArgs = {
  name: string;
  tokenAllowed: TokenAllowedArgs;
  stakeAmount: number | bigint;
  fee: number;
  stakeEndAt: number | bigint;
  claimStartFrom: number | bigint;
};

export function getCreateChallengeInstructionDataEncoder(): Encoder<CreateChallengeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['tokenAllowed', getTokenAllowedEncoder()],
      ['stakeAmount', getU64Encoder()],
      ['fee', getU16Encoder()],
      ['stakeEndAt', getI64Encoder()],
      ['claimStartFrom', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CHALLENGE_DISCRIMINATOR })
  );
}

export function getCreateChallengeInstructionDataDecoder(): Decoder<CreateChallengeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['tokenAllowed', getTokenAllowedDecoder()],
    ['stakeAmount', getU64Decoder()],
    ['fee', getU16Decoder()],
    ['stakeEndAt', getI64Decoder()],
    ['claimStartFrom', getI64Decoder()],
  ]);
}

export function getCreateChallengeInstructionDataCodec(): Codec<
  CreateChallengeInstructionDataArgs,
  CreateChallengeInstructionData
> {
  return combineCodec(
    getCreateChallengeInstructionDataEncoder(),
    getCreateChallengeInstructionDataDecoder()
  );
}

export type CreateChallengeAsyncInput<
  TAccountInitiator extends string = string,
  TAccountVault extends string = string,
  TAccountChallenge extends string = string,
  TAccountSchema extends string = string,
  TAccountCredential extends string = string,
  TAccountCredentialAuthority extends string = string,
  TAccountStakeMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  initiator: TransactionSigner<TAccountInitiator>;
  vault?: Address<TAccountVault>;
  challenge?: Address<TAccountChallenge>;
  schema: Address<TAccountSchema>;
  credential: Address<TAccountCredential>;
  credentialAuthority?: Address<TAccountCredentialAuthority>;
  stakeMint: Address<TAccountStakeMint>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: CreateChallengeInstructionDataArgs['name'];
  tokenAllowed: CreateChallengeInstructionDataArgs['tokenAllowed'];
  stakeAmount: CreateChallengeInstructionDataArgs['stakeAmount'];
  fee: CreateChallengeInstructionDataArgs['fee'];
  stakeEndAt: CreateChallengeInstructionDataArgs['stakeEndAt'];
  claimStartFrom: CreateChallengeInstructionDataArgs['claimStartFrom'];
};

export async function getCreateChallengeInstructionAsync<
  TAccountInitiator extends string,
  TAccountVault extends string,
  TAccountChallenge extends string,
  TAccountSchema extends string,
  TAccountCredential extends string,
  TAccountCredentialAuthority extends string,
  TAccountStakeMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: CreateChallengeAsyncInput<
    TAccountInitiator,
    TAccountVault,
    TAccountChallenge,
    TAccountSchema,
    TAccountCredential,
    TAccountCredentialAuthority,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateChallengeInstruction<
    TProgramAddress,
    TAccountInitiator,
    TAccountVault,
    TAccountChallenge,
    TAccountSchema,
    TAccountCredential,
    TAccountCredentialAuthority,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    initiator: { value: input.initiator ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    challenge: { value: input.challenge ?? null, isWritable: true },
    schema: { value: input.schema ?? null, isWritable: false },
    credential: { value: input.credential ?? null, isWritable: false },
    credentialAuthority: {
      value: input.credentialAuthority ?? null,
      isWritable: false,
    },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.challenge.value) {
    accounts.challenge.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 104, 97, 108, 108, 101, 110, 103, 101])
        ),
        getAddressEncoder().encode(expectAddress(accounts.initiator.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.name)
        ),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.challenge.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.stakeMint.value)),
      ],
    });
  }
  if (!accounts.credentialAuthority.value) {
    accounts.credentialAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.initiator),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.challenge),
      getAccountMeta(accounts.schema),
      getAccountMeta(accounts.credential),
      getAccountMeta(accounts.credentialAuthority),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateChallengeInstructionDataEncoder().encode(
      args as CreateChallengeInstructionDataArgs
    ),
  } as CreateChallengeInstruction<
    TProgramAddress,
    TAccountInitiator,
    TAccountVault,
    TAccountChallenge,
    TAccountSchema,
    TAccountCredential,
    TAccountCredentialAuthority,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateChallengeInput<
  TAccountInitiator extends string = string,
  TAccountVault extends string = string,
  TAccountChallenge extends string = string,
  TAccountSchema extends string = string,
  TAccountCredential extends string = string,
  TAccountCredentialAuthority extends string = string,
  TAccountStakeMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  initiator: TransactionSigner<TAccountInitiator>;
  vault: Address<TAccountVault>;
  challenge: Address<TAccountChallenge>;
  schema: Address<TAccountSchema>;
  credential: Address<TAccountCredential>;
  credentialAuthority: Address<TAccountCredentialAuthority>;
  stakeMint: Address<TAccountStakeMint>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: CreateChallengeInstructionDataArgs['name'];
  tokenAllowed: CreateChallengeInstructionDataArgs['tokenAllowed'];
  stakeAmount: CreateChallengeInstructionDataArgs['stakeAmount'];
  fee: CreateChallengeInstructionDataArgs['fee'];
  stakeEndAt: CreateChallengeInstructionDataArgs['stakeEndAt'];
  claimStartFrom: CreateChallengeInstructionDataArgs['claimStartFrom'];
};

export function getCreateChallengeInstruction<
  TAccountInitiator extends string,
  TAccountVault extends string,
  TAccountChallenge extends string,
  TAccountSchema extends string,
  TAccountCredential extends string,
  TAccountCredentialAuthority extends string,
  TAccountStakeMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DESCIPLINE_PROGRAM_ADDRESS,
>(
  input: CreateChallengeInput<
    TAccountInitiator,
    TAccountVault,
    TAccountChallenge,
    TAccountSchema,
    TAccountCredential,
    TAccountCredentialAuthority,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateChallengeInstruction<
  TProgramAddress,
  TAccountInitiator,
  TAccountVault,
  TAccountChallenge,
  TAccountSchema,
  TAccountCredential,
  TAccountCredentialAuthority,
  TAccountStakeMint,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DESCIPLINE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    initiator: { value: input.initiator ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    challenge: { value: input.challenge ?? null, isWritable: true },
    schema: { value: input.schema ?? null, isWritable: false },
    credential: { value: input.credential ?? null, isWritable: false },
    credentialAuthority: {
      value: input.credentialAuthority ?? null,
      isWritable: false,
    },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.initiator),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.challenge),
      getAccountMeta(accounts.schema),
      getAccountMeta(accounts.credential),
      getAccountMeta(accounts.credentialAuthority),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateChallengeInstructionDataEncoder().encode(
      args as CreateChallengeInstructionDataArgs
    ),
  } as CreateChallengeInstruction<
    TProgramAddress,
    TAccountInitiator,
    TAccountVault,
    TAccountChallenge,
    TAccountSchema,
    TAccountCredential,
    TAccountCredentialAuthority,
    TAccountStakeMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateChallengeInstruction<
  TProgram extends string = typeof DESCIPLINE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    initiator: TAccountMetas[0];
    vault: TAccountMetas[1];
    challenge: TAccountMetas[2];
    schema: TAccountMetas[3];
    credential: TAccountMetas[4];
    credentialAuthority: TAccountMetas[5];
    stakeMint: TAccountMetas[6];
    associatedTokenProgram: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: CreateChallengeInstructionData;
};

export function parseCreateChallengeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateChallengeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      initiator: getNextAccount(),
      vault: getNextAccount(),
      challenge: getNextAccount(),
      schema: getNextAccount(),
      credential: getNextAccount(),
      credentialAuthority: getNextAccount(),
      stakeMint: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateChallengeInstructionDataDecoder().decode(instruction.data),
  };
}
