/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getTokenAllowedDecoder,
  getTokenAllowedEncoder,
  type TokenAllowed,
  type TokenAllowedArgs,
} from '../types';

export const CHALLENGE_DISCRIMINATOR = new Uint8Array([
  119, 250, 161, 121, 119, 81, 22, 208,
]);

export function getChallengeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CHALLENGE_DISCRIMINATOR);
}

export type Challenge = {
  discriminator: ReadonlyUint8Array;
  name: string;
  initiator: Address;
  tokenAllowed: TokenAllowed;
  stakeAmount: bigint;
  fee: number;
  stakeEndAt: bigint;
  claimStartFrom: bigint;
  schema: Address;
  attestor: Address;
  bump: number;
};

export type ChallengeArgs = {
  name: string;
  initiator: Address;
  tokenAllowed: TokenAllowedArgs;
  stakeAmount: number | bigint;
  fee: number;
  stakeEndAt: number | bigint;
  claimStartFrom: number | bigint;
  schema: Address;
  attestor: Address;
  bump: number;
};

export function getChallengeEncoder(): Encoder<ChallengeArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['initiator', getAddressEncoder()],
      ['tokenAllowed', getTokenAllowedEncoder()],
      ['stakeAmount', getU64Encoder()],
      ['fee', getU16Encoder()],
      ['stakeEndAt', getI64Encoder()],
      ['claimStartFrom', getI64Encoder()],
      ['schema', getAddressEncoder()],
      ['attestor', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CHALLENGE_DISCRIMINATOR })
  );
}

export function getChallengeDecoder(): Decoder<Challenge> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['initiator', getAddressDecoder()],
    ['tokenAllowed', getTokenAllowedDecoder()],
    ['stakeAmount', getU64Decoder()],
    ['fee', getU16Decoder()],
    ['stakeEndAt', getI64Decoder()],
    ['claimStartFrom', getI64Decoder()],
    ['schema', getAddressDecoder()],
    ['attestor', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getChallengeCodec(): Codec<ChallengeArgs, Challenge> {
  return combineCodec(getChallengeEncoder(), getChallengeDecoder());
}

export function decodeChallenge<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Challenge, TAddress>;
export function decodeChallenge<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Challenge, TAddress>;
export function decodeChallenge<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Challenge, TAddress> | MaybeAccount<Challenge, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getChallengeDecoder()
  );
}

export async function fetchChallenge<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Challenge, TAddress>> {
  const maybeAccount = await fetchMaybeChallenge(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeChallenge<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Challenge, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeChallenge(maybeAccount);
}

export async function fetchAllChallenge(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Challenge>[]> {
  const maybeAccounts = await fetchAllMaybeChallenge(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeChallenge(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Challenge>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeChallenge(maybeAccount));
}
