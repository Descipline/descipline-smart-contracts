/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const RESOLUTION_DISCRIMINATOR = new Uint8Array([
  31, 13, 235, 201, 17, 66, 5, 138,
]);

export function getResolutionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(RESOLUTION_DISCRIMINATOR);
}

export type Resolution = {
  discriminator: ReadonlyUint8Array;
  rootHash: ReadonlyUint8Array;
  winnerCount: number;
  winnerNotclaimCount: number;
  winnerListUri: ReadonlyUint8Array;
  bump: number;
};

export type ResolutionArgs = {
  rootHash: ReadonlyUint8Array;
  winnerCount: number;
  winnerNotclaimCount: number;
  winnerListUri: ReadonlyUint8Array;
  bump: number;
};

export function getResolutionEncoder(): Encoder<ResolutionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rootHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['winnerCount', getU8Encoder()],
      ['winnerNotclaimCount', getU8Encoder()],
      [
        'winnerListUri',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: RESOLUTION_DISCRIMINATOR })
  );
}

export function getResolutionDecoder(): Decoder<Resolution> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rootHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['winnerCount', getU8Decoder()],
    ['winnerNotclaimCount', getU8Decoder()],
    ['winnerListUri', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getResolutionCodec(): Codec<ResolutionArgs, Resolution> {
  return combineCodec(getResolutionEncoder(), getResolutionDecoder());
}

export function decodeResolution<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Resolution, TAddress>;
export function decodeResolution<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Resolution, TAddress>;
export function decodeResolution<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Resolution, TAddress> | MaybeAccount<Resolution, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getResolutionDecoder()
  );
}

export async function fetchResolution<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Resolution, TAddress>> {
  const maybeAccount = await fetchMaybeResolution(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeResolution<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Resolution, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeResolution(maybeAccount);
}

export async function fetchAllResolution(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Resolution>[]> {
  const maybeAccounts = await fetchAllMaybeResolution(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeResolution(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Resolution>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeResolution(maybeAccount));
}
