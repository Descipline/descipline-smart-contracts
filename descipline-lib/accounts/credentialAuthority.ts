/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CREDENTIAL_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  252, 102, 35, 185, 7, 48, 175, 85,
]);

export function getCredentialAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREDENTIAL_AUTHORITY_DISCRIMINATOR
  );
}

export type CredentialAuthority = {
  discriminator: ReadonlyUint8Array;
  signer: Address;
  bump: number;
};

export type CredentialAuthorityArgs = { signer: Address; bump: number };

export function getCredentialAuthorityEncoder(): FixedSizeEncoder<CredentialAuthorityArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['signer', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREDENTIAL_AUTHORITY_DISCRIMINATOR })
  );
}

export function getCredentialAuthorityDecoder(): FixedSizeDecoder<CredentialAuthority> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['signer', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getCredentialAuthorityCodec(): FixedSizeCodec<
  CredentialAuthorityArgs,
  CredentialAuthority
> {
  return combineCodec(
    getCredentialAuthorityEncoder(),
    getCredentialAuthorityDecoder()
  );
}

export function decodeCredentialAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CredentialAuthority, TAddress>;
export function decodeCredentialAuthority<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CredentialAuthority, TAddress>;
export function decodeCredentialAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<CredentialAuthority, TAddress>
  | MaybeAccount<CredentialAuthority, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCredentialAuthorityDecoder()
  );
}

export async function fetchCredentialAuthority<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CredentialAuthority, TAddress>> {
  const maybeAccount = await fetchMaybeCredentialAuthority(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCredentialAuthority<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CredentialAuthority, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCredentialAuthority(maybeAccount);
}

export async function fetchAllCredentialAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CredentialAuthority>[]> {
  const maybeAccounts = await fetchAllMaybeCredentialAuthority(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCredentialAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CredentialAuthority>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeCredentialAuthority(maybeAccount)
  );
}

export function getCredentialAuthoritySize(): number {
  return 41;
}
