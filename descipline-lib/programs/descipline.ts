/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClaimAndCloseInstruction,
  type ParsedClaimInstruction,
  type ParsedCreateChallengeInstruction,
  type ParsedInitAuthorityInstruction,
  type ParsedResolveInstruction,
  type ParsedStakeInstruction,
} from '../instructions';

export const DESCIPLINE_PROGRAM_ADDRESS =
  '2s3weLk9GXoqkbw377YbiQpfQX1eQ6DxUsfHi82WRZLF' as Address<'2s3weLk9GXoqkbw377YbiQpfQX1eQ6DxUsfHi82WRZLF'>;

export enum DesciplineAccount {
  Challenge,
  CredentialAuthority,
  Receipt,
  Resolution,
}

export function identifyDesciplineAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DesciplineAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([119, 250, 161, 121, 119, 81, 22, 208])
      ),
      0
    )
  ) {
    return DesciplineAccount.Challenge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([252, 102, 35, 185, 7, 48, 175, 85])
      ),
      0
    )
  ) {
    return DesciplineAccount.CredentialAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([39, 154, 73, 106, 80, 102, 145, 153])
      ),
      0
    )
  ) {
    return DesciplineAccount.Receipt;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([31, 13, 235, 201, 17, 66, 5, 138])
      ),
      0
    )
  ) {
    return DesciplineAccount.Resolution;
  }
  throw new Error(
    'The provided account could not be identified as a descipline account.'
  );
}

export enum DesciplineInstruction {
  Claim,
  ClaimAndClose,
  CreateChallenge,
  InitAuthority,
  Resolve,
  Stake,
}

export function identifyDesciplineInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DesciplineInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([62, 198, 214, 193, 213, 159, 108, 210])
      ),
      0
    )
  ) {
    return DesciplineInstruction.Claim;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([177, 41, 244, 95, 42, 114, 27, 99])
      ),
      0
    )
  ) {
    return DesciplineInstruction.ClaimAndClose;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 244, 47, 1, 1, 15, 173, 239])
      ),
      0
    )
  ) {
    return DesciplineInstruction.CreateChallenge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 150, 94, 172, 74, 199, 236, 85])
      ),
      0
    )
  ) {
    return DesciplineInstruction.InitAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 150, 236, 206, 108, 63, 58, 10])
      ),
      0
    )
  ) {
    return DesciplineInstruction.Resolve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 176, 202, 18, 200, 209, 179, 108])
      ),
      0
    )
  ) {
    return DesciplineInstruction.Stake;
  }
  throw new Error(
    'The provided instruction could not be identified as a descipline instruction.'
  );
}

export type ParsedDesciplineInstruction<
  TProgram extends string = '2s3weLk9GXoqkbw377YbiQpfQX1eQ6DxUsfHi82WRZLF',
> =
  | ({
      instructionType: DesciplineInstruction.Claim;
    } & ParsedClaimInstruction<TProgram>)
  | ({
      instructionType: DesciplineInstruction.ClaimAndClose;
    } & ParsedClaimAndCloseInstruction<TProgram>)
  | ({
      instructionType: DesciplineInstruction.CreateChallenge;
    } & ParsedCreateChallengeInstruction<TProgram>)
  | ({
      instructionType: DesciplineInstruction.InitAuthority;
    } & ParsedInitAuthorityInstruction<TProgram>)
  | ({
      instructionType: DesciplineInstruction.Resolve;
    } & ParsedResolveInstruction<TProgram>)
  | ({
      instructionType: DesciplineInstruction.Stake;
    } & ParsedStakeInstruction<TProgram>);
